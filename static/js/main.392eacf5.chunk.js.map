{"version":3,"sources":["logo.svg","listomania-logo.png","components/about.jsx","serviceWorker.js","components/home.jsx","components/settings.jsx","components/play.jsx","index.js"],"names":["module","exports","About","className","Button","variant","to","Component","Boolean","window","location","hostname","match","onSuccess","response","console","log","onFailure","App","src","logo","alt","clientId","redirectUri","Play","Provider","value","id","data","loading","error","name","genres","map","genre","key","routing","exact","path","component","Home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,gNCOtBC,E,uKAEjB,OACE,6BACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,iBACX,2GAEA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aAAY,kBAAC,IAAD,CAAMC,GAAG,gBAAT,mB,GARXC,aCKfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCNAC,EAAY,SAASC,GACzBC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,YAGRC,EAAY,SAASH,GACzBC,QAAQC,IAAIF,IAGOI,E,uKAEjB,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKgB,IAAKC,IAAMjB,UAAU,WAAWkB,IAAI,SACzC,2FAGA,kBAAC,IAAD,CAAcC,SC9BA,mCD+BZC,YAAa,sCACbV,UAAWA,EACXI,UAAWA,IACb,kBAACb,EAAA,EAAD,CAAQC,QAAQ,aAAY,kBAAC,IAAD,CAAMC,GAAG,qBAAT,oB,GAbLC,a,QEjBZiB,E,uKAEf,OACE,6BACE,kBAAC,IAAkBC,SAAnB,CAA4BC,MAAO,4JACnC,kBAAC,IAAD,CAAQC,GAAI,2BACL,gBAAGC,EAAH,EAAGA,KAAH,EAASC,QAAT,EAAkBC,MAAlB,OACDF,EACI,6BACA,4BAAKA,EAAKG,MACV,4BACKH,EAAKI,OAAOC,KAAI,SAAAC,GAAK,OACtB,wBAAIC,IAAKD,GAAQA,QAIrB,c,GAhBc3B,aCO5B6B,EACJ,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWC,IAC3C,kBAAC,IAAD,CAAOF,KAAK,oBAAoBC,UAAWrC,IAC3C,kBAAC,IAAD,CAAOoC,KAAK,mBAAmBC,UAAWf,MAKhDiB,IAASC,OACPN,EACAO,SAASC,eAAe,SJ4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLf,QAAQe,MAAMA,EAAMsB,c","file":"static/js/main.392eacf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/listomania-logo.d69c2d60.png\";","import React, { Component } from 'react'\nimport '../App.css'; \nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n          <div className=\"more-info-page\">\n              <div className=\"more-info-box\">\n                  <p>Create a playlist with your all-time favorite songs. music nerds rise up!!1!\n                  </p>\n                  <Button variant=\"contained\"><Link to=\"/listomania/\">Go Back</Link></Button>\n              </div>\n          </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react'\nimport logo from '../listomania-logo.png';\nimport '../App.css';\n\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nimport ReactDOM from 'react-dom';\nimport SpotifyLogin from 'react-spotify-login';\nimport { clientId, redirectUri } from './settings.jsx';\n \nconst onSuccess = function(response) {\n  console.log(response);\n  console.log(\"we win?\");\n}\n\nconst onFailure = function(response) {\n  console.log(response);\n}\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Ever wonder what would be on your ultimate spotify playlist?\n          </p>\n          <SpotifyLogin clientId={clientId}\n            redirectUri={'https://lbakke.github.io/listomania'}\n            onSuccess={onSuccess}\n            onFailure={onFailure}/>\n          <Button variant=\"contained\"><Link to=\"/listomania/about\">More Info</Link></Button>\n        </header>\n      </div>\n    );\n  }\n}","export const clientId = '8db0e36af4d14373a26ba100f16b2ad3';\nexport const redirectUri = 'https://lbakke.github.io/listomania';","import React, { Component } from 'react'\nimport '../App.css'; \nimport { SpotifyApiContext, Artist } from 'react-spotify-api';\n\nexport default class Play extends Component {\n    render() {\n      return (\n        <div>\n          <SpotifyApiContext.Provider value={'BQAbnua41wG_f9Ll5a0qGJgjGblkq1u6mvc1MzFR3lmhPSU2F29yl7NMUlvJGEDS5p0oOEeSBUdEKA2IL5sSu7b9oQ0UtfyqtWpn3w6-DNG3Ywps30DSuTsDXRGjcCDC4C5XBKw8jiX2FMLFwpVzx-Fa'}>\n          <Artist id={'4yvcSjfu4PC0CYQyLy4wSq'}>\n                {({ data, loading, error }) =>\n                data ? (\n                    <div>\n                    <h1>{data.name}</h1>\n                    <ul>\n                        {data.genres.map(genre => (\n                        <li key={genre}>{genre}</li>\n                        ))}\n                    </ul>\n                    </div>\n                ) : null\n                }\n            </Artist>\n          </SpotifyApiContext.Provider>\n        </div>\n      )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\nimport About from './components/about.jsx'; \nimport Home from './components/home.jsx';\nimport Play from './components/play.jsx';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/listomania\" component={Home} />\n      <Route path=\"/listomania/about\" component={About} />\n      <Route path=\"/listomania/play\" component={Play} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}