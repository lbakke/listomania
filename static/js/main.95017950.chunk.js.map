{"version":3,"sources":["logo.svg","listomania-logo.png","components/about.jsx","components/navbar.jsx","components/play.jsx","serviceWorker.js","components/home.jsx","index.js"],"names":["module","exports","About","className","Button","variant","to","Component","Navbar","useState","spotifyAuthToken","setSpotifyAuthToken","useEffect","Cookies","get","Provider","value","user","data","display_name","Play","Boolean","window","location","hostname","match","aboutStyle","Card","Meta","button1","button2","button3","button4","button5","about","style","href","App","size","type","placement","title","content","trigger","onClick","remove","path","color","redirectUri","clientID","scopes","Scopes","userReadPrivate","userReadEmail","btnClassName","noLogo","routing","exact","component","Home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95017950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/listomania-logo.d69c2d60.png\";","import React, { Component } from 'react'\nimport '../App.css'; \nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n          <div className=\"more-info-page\">\n              <div className=\"more-info-box\">\n                  <p><h1>Listomania</h1>...is about playing with playlists! this app will search through your playlists and create one with the qualities you \n                    want - danceability, etc! it will create the playlist for you and name it [username]-dance, [username]-energy, \n                    etc! so get ready to see your playlists taken to the next level!\n                  </p>\n                  <Button variant=\"contained\"><Link to=\"/listomania/\">Go Back</Link></Button>\n              </div>\n          </div>\n      </div>\n    )\n  }\n}\n","import React, { Component, useEffect, useState } from 'react'\nimport '../App.css'; \nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Cookies from 'js-cookie'\nimport { SpotifyApiContext, User, UserTop } from 'react-spotify-api'\n\n\n\n// export default class Navbar extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <div className=\"navbar\">\n//           <h1 className=\"navbar-logo\">Listomania</h1>\n//           <h2 className=\"navbar-user\">Hello, user!</h2>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n\n\n\nconst Navbar = () => {\n    const [spotifyAuthToken, setSpotifyAuthToken] = useState()\n  \n    useEffect(() => {\n      setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\n    }, [Cookies.get('spotifyAuthToken')])\n    return (\n      <div className='navbar'>\n        <h1 className=\"navbar-logo\">Listomania</h1>\n        <SpotifyApiContext.Provider value={spotifyAuthToken}>\n                <User>\n                  {(user) =>\n                    user && user.data ? (\n                      <>\n                        <h2 className=\"navbar-user\">Hello, {user.data.display_name}!</h2>\n                      </>\n                    ) : (\n                        <h2 className=\"navbar-user\">...!</h2>\n                      )\n                  }\n                </User>\n              </SpotifyApiContext.Provider>\n      </div>\n    )\n  }\n\n  export default Navbar;","import React, { Component, useEffect, useState } from 'react'\nimport '../App.css'; \nimport { SpotifyApiContext, User, UserTop } from 'react-spotify-api'\n\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\n// import 'react-spotify-auth/dist/index.css'\nimport { MDBCol, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBBtn } from \"mdbreact\";\nimport Cookies from 'js-cookie'\nimport Navbar from './navbar.jsx'\n\nconst Play = () => {\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState()\n\n  useEffect(() => {\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Cookies.get('spotifyAuthToken')])\n  return (\n    <div className='app'>\n      <Navbar></Navbar>\n      <SpotifyApiContext.Provider value={spotifyAuthToken}>\n              <User>\n                {(user) =>\n                  user && user.data ? (\n                    <>\n                      <h1>Hello, {user.data.display_name} !</h1>\n                    </>\n                  ) : (\n                      <p>Loading...</p>\n                    )\n                }\n              </User>\n            </SpotifyApiContext.Provider>\n    </div>\n  )\n}\n\nexport default Play;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { SpotifyApiContext, User, UserTop } from 'react-spotify-api'\nimport Cookies from 'js-cookie'\n\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\nimport { FaSpotify } from 'react-icons/fa'; \nimport Navbar from './navbar.jsx'\n\nimport { MDBCol, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBBtn } from \"mdbreact\";\n// import 'mdbreact/dist/css/mdb.css'\n\nimport '../index.css';\nimport TrackCard from \"./trackcard\";\nimport logo from '../listomania-logo.png';\n// import Button from '@material-ui/core/Button';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport { Typography, Space, Button, Card, Popover } from 'antd';\nconst { Meta } = Card;\n\nconst aboutStyle = {\n  \"margin-bottom\": \"-4px\"\n}\n\nconst button1 = {\n  \"background-color\": \"#8fffa7\",\n  \"border-color\": \"black\", \n  \"color\": \"black\"\n}\n\nconst button2 = {\n  \"background-color\": \"#8ffffb\",\n  \"border-color\": \"black\", \n  \"color\": \"black\"\n}\n\nconst button3 = {\n  \"background-color\": \"#ffd08f\",\n  \"border-color\": \"black\", \n  \"color\": \"black\"\n}\n\nconst button4 = {\n  \"background-color\": \"#ff8fe3\",\n  \"border-color\": \"black\", \n  \"color\": \"black\"\n}\n\nconst button5 = {\n  \"background-color\": \"#bb9cff\",\n  \"border-color\": \"black\", \n  \"color\": \"black\"\n}\n\nconst about = (\n  <div>\n    <p style={aboutStyle}>Listomania is a tool that creates</p>\n    <p style={aboutStyle}>playlists based on your mood. It uses</p>\n    <p style={aboutStyle}>the public playlists you already have to</p>\n    <p>ensure they are full of songs you love!</p>\n    <p style={aboutStyle}>This tool was created by Lauren Bakke: </p>\n    <a href=\"https://lbakke.github.io\" style={{\"color\": \"blue\"}}>lbakke.github.io</a>\n  </div>\n);\n\nconst dev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nconst App = () => {\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState()\n\n  useEffect(() => {\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Cookies.get('spotifyAuthToken')])\n\n  const logout = () => {\n    Cookies.remove('spotifyAuthToken', { path: dev ? '' : 'react-spotify-auth' })\n    window.location = dev ? '/listomania' : '/react-spotify-auth'\n  }\n\n  return (\n    <div className='app'>\n        {/* If there is a cookie named 'spotifyAuthToken' */}\n        {Cookies.get('spotifyAuthToken') ? (\n          // Display the app\n          <>\n          <Navbar></Navbar>\n            <div className=\"home-authenticated\">\n            <div className=\"home-header-authenticated\">current mood?</div>\n            <div className=\"home-buttons-holder\">\n              <Button className=\"home-button\" style={button1} size=\"large\" type=\"primary\"><Link to=\"listomania/play\">dance party</Link></Button>\n              <Button className=\"home-button\" style={button2} size=\"large\"><Link to=\"listomania/play\">happy thoughts</Link></Button>\n              <Button className=\"home-button\" style={button3} size=\"large\"><Link to=\"listomania/play\">sad boi hours</Link></Button>\n              <Button className=\"home-button\" style={button4} size=\"large\"><Link to=\"listomania/play\">big brain</Link></Button>\n              <Button className=\"home-button\" style={button5} size=\"large\"><Link to=\"listomania/play\">sentimental favs</Link></Button>\n            </div>\n            </div>\n            <div className=\"home-other-buttons-holder\">\n              <Popover style={{\"max-width\": \"200px\"}} placement=\"bottom\" title=\"What is this?\" content={about} trigger=\"click\">\n                <Button className=\"home-button\" size=\"large\">What's Happening?</Button>\n              </Popover>\n              <Button className=\"home-button\" size=\"large\" onClick={logout}>                \n                Logout\n              </Button>\n            </div>\n          </>\n        ) : (\n            <div>\n          <header className=\"App-header\">\n          <p className=\"home-header\">Listomania</p>\n          <div className=\"spotify-button\">\n            <FaSpotify color=\"#bfff00\"></FaSpotify>\n                <SpotifyAuth\n                  redirectUri={dev ? 'http://localhost:3000/listomania' : 'https://lbakke.github.io/listomania/'}\n                  clientID='8db0e36af4d14373a26ba100f16b2ad3'\n                  scopes={[Scopes.userReadPrivate, Scopes.userReadEmail, \"user-top-read\"]}\n                  btnClassName=\"spotify-button\"\n                  noLogo='true'\n                  title='Login with Spotify'\n                />\n              </div>\n          <Popover style={{\"max-width\": \"200px\"}} placement=\"bottom\" title=\"What is this?\" content={about} trigger=\"click\">\n            <Button type=\"text\">More Info</Button>\n          </Popover>\n          </header>\n            </div>\n          )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport 'antd/dist/antd.css';\n\nimport About from './components/about.jsx'; \nimport Home from './components/home.jsx';\nimport Play from './components/play.jsx';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/listomania\" component={Home} />\n      <Route path=\"/listomania/about\" component={About} />\n      <Route path=\"/listomania/play\" component={Play} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}